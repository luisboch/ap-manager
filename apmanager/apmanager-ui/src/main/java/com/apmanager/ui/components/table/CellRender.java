/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.apmanager.ui.components.table;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author ADMIN
 */
public class CellRender extends javax.swing.JPanel implements TableCellRenderer {

    public static final Color blueSelected = new Color(30, 30, 255);

    public static final Color blue = new Color(0, 0, 238);

    public static final Color white = Color.white;

    public static final Color black = Color.BLACK;

    private CellRenderListener listener;

    /**
     * Creates new form CellRender
     */
    public CellRender() {
        initComponents();
    }

    public CellRender(CellRenderListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jLabel1");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected, boolean hasFocus,
            int row, int column) {

        Color bg = null;
        if (listener != null) {
            bg = listener.getBackgroundColor(table, value, isSelected, hasFocus,
                    row, column);
        }
        if (bg == null) {
            if (hasFocus) {
                this.setBackground(blueSelected);
                this.jLabel1.setForeground(white);

            } else if (isSelected) {
                this.setBackground(blue);
                this.jLabel1.setForeground(white);
                jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(blue));
            } else {
                this.setBackground(white);
                jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(white));
                this.jLabel1.setForeground(black);
            }
        } else {
            this.setBackground(bg);
            this.jLabel1.setForeground(black);
        }

        if (isSelected) {
            if (column == 0) {
                jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 0, blue));
            } else if (column == table.getColumnCount() - 1) {
                jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 2, 2, blue));
            } else {
                jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 2, 0, blue));
            }
        } else if (bg != null) {
            jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, bg));
        }

        if (value != null) {
            this.jLabel1.setText(value.toString());
        } else {
            this.jLabel1.setText("");
        }

        return this;
    }

    public CellRenderListener getListener() {
        return listener;
    }

    public void setListener(CellRenderListener listener) {
        this.listener = listener;
    }
}
