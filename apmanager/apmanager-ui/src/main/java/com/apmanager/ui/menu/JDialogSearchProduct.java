/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.apmanager.ui.menu;

import com.apmanager.domain.entity.Product;
import com.apmanager.service.impl.ProductService;
import com.apmanager.ui.components.Table;
import com.apmanager.ui.components.abstractcomps.JDialogEscape;
import com.apmanager.ui.components.table.CellRender;
import com.apmanager.ui.components.table.CellRenderListener;
import com.apmanager.ui.listeners.KeyListener;
import com.apmanager.ui.listeners.MouseListener;
import com.towel.el.FieldResolver;
import com.towel.swing.table.ObjectTableModel;
import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;

/**
 *
 * @author ADMIN
 */
public class JDialogSearchProduct extends JDialogEscape {

    private Object selected;

    private ProductService service;

    private List<Product> results;

    /**
     * Creates new form JDialogSearchProduct
     */
    public JDialogSearchProduct(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        configureListener();
        service = new ProductService();
        results = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextFieldSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResults = new Table();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(435, 485));
        setModal(true);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(103, 179, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setViewportView(jTableResults);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldSearch)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableResults;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    public void setText(String string) {
        this.jTextFieldSearch.setText(string);
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        jTextFieldSearch.requestFocus();

        clear();

        if (jTextFieldSearch.getText().equals(" ")) {
            search();
        }
    }

    public void clear() {
        results.clear();
        populateResults();
    }

    private void populateResults() {


        FieldResolver nameResolver = new FieldResolver(Product.class, "name", "Nome");
        FieldResolver codeResolver = new FieldResolver(Product.class, "code", "CÃ³digo");
        FieldResolver brandResolver = new FieldResolver(Product.class, "brand.name", "Marca");
        FieldResolver qtdResolver = new FieldResolver(Product.class, "quantity", "Estoque");
        FieldResolver minQtdResolver = new FieldResolver(Product.class, "minQuantity", "Estoque Minimo");
        final ObjectTableModel<Product> model = new ObjectTableModel<>(
                new FieldResolver[]{codeResolver, nameResolver, brandResolver,
                    qtdResolver, minQtdResolver});
        model.setData(results);

        CellRender cellRender = (CellRender) jTableResults.getDefaultRenderer(String.class);
        cellRender.setListener(new CellRenderListener() {
            @Override
            public Color getBackgroundColor(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Product p = model.getData().get(row);
                if (p.getQuantity() <= 0) {
                    if (hasFocus) {
                        return new Color(255, 99, 30);
                    } else {
                        return new Color(255, 69, 0);
                    }
                } else if (p.getQuantity() <= p.getMinQuantity()) {
                    if (hasFocus) {
                        return new Color(255, 223, 67);
                    } else {
                        return new Color(255, 193, 37);
                    }
                } else {
                    return null;
                }
            }
        });

        jTableResults.setModel(model);



    }

    private void configureListener() {
        final JDialogSearchProduct dialog = this;
        jTextFieldSearch.addKeyListener(new KeyListener(this) {
            @Override
            public void onKeyRelease(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER
                        || e.getKeyCode() == KeyEvent.VK_SPACE) {
                    search();
                }
            }
        });


        jTableResults.addMouseListener(new MouseListener(this) {
            @Override
            public void onMouseClick(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    selected =
                            ((Table<Product>) jTableResults).getSelected();
                    dialog.setVisible(false);

                }
            }
        });

        jTableResults.addKeyListener(new KeyListener(this) {
            @Override
            public void onKeyRelease(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    List<Product> products =
                            ((Table<Product>) jTableResults).getSelecteds();
                    if (products != null && !products.isEmpty()) {
                        selected = products;
                        dialog.setVisible(false);
                    }
                }
            }
        });
    }

    private void search() {
        results = service.search(jTextFieldSearch.getText(), 15);
        populateResults();
    }

    public Object getSelected() {
        return selected;
    }

    @Override
    protected void onHide(AWTEvent e) {
        selected = null;
    }
    
    
}
